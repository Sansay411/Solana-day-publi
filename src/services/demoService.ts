// Demo Service - Mock Firebase functionality for demo mode
import { User, TokenHolding } from '../App';

// Demo mode flag - set to true to avoid Firebase connection errors
// Auto-enabled when Firebase is unavailable
export let DEMO_MODE = false;

// Function to enable demo mode dynamically
export const enableDemoMode = () => {
  console.log('üîß Switching to demo mode due to Firebase connectivity issues');
  DEMO_MODE = true;
};

// Function to disable demo mode
export const disableDemoMode = () => {
  console.log('üîß Switching back to Firebase mode');
  DEMO_MODE = false;
};

// Demo data storage
class DemoStorage {
  private static storage = new Map<string, any>();
  
  static set(key: string, value: any): void {
    this.storage.set(key, JSON.stringify(value));
  }
  
  static get(key: string): any {
    const data = this.storage.get(key);
    return data ? JSON.parse(data) : null;
  }
  
  static delete(key: string): void {
    this.storage.delete(key);
  }
  
  static has(key: string): boolean {
    return this.storage.has(key);
  }
}

// Demo user database
export class DemoUserService {
  static async createUserProfile(userId: string, email: string, walletAddress?: string): Promise<User> {
    const userProfile: User = {
      id: userId,
      email,
      walletAddress: walletAddress || `Demo${Math.random().toString(36).substring(2, 15)}`,
      isKYCVerified: false,
      portfolio: this.getDemoPortfolio(),
      totalBalance: 52500
    };

    DemoStorage.set(`user-${userId}`, userProfile);
    return userProfile;
  }

  static async getUserProfile(userId: string): Promise<User | null> {
    const cached = DemoStorage.get(`user-${userId}`);
    if (cached) {
      return cached;
    }

    // Create demo user if doesn't exist
    if (userId.includes('demo') || userId.includes('Demo')) {
      return this.createUserProfile(userId, 'demo@tokenvault.com');
    }

    return null;
  }

  static async updateUserProfile(userId: string, updates: Partial<User>): Promise<void> {
    const user = await this.getUserProfile(userId);
    if (user) {
      const updatedUser = { ...user, ...updates };
      DemoStorage.set(`user-${userId}`, updatedUser);
    }
  }

  static getDemoPortfolio(): TokenHolding[] {
    return [
      {
        id: 'demo-real-estate-1',
        symbol: 'REAL',
        name: '–≠–ª–∏—Ç–Ω–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
        amount: 50,
        value: 25000,
        priceChange24h: 2.3,
        assetType: 'real-estate',
        tokenAddress: 'DemoREAL123...'
      },
      {
        id: 'demo-art-1',
        symbol: 'ART',
        name: '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ',
        amount: 25,
        value: 12500,
        priceChange24h: -1.2,
        assetType: 'art',
        tokenAddress: 'DemoART456...'
      },
      {
        id: 'demo-music-1',
        symbol: 'MUSIC',
        name: '–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞',
        amount: 100,
        value: 15000,
        priceChange24h: 5.7,
        assetType: 'music',
        tokenAddress: 'DemoMUSIC789...'
      }
    ];
  }
}

// Demo marketplace service
export class DemoMarketplaceService {
  static async getMarketplaceListings(filters?: any): Promise<any[]> {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 300));
    
    let listings = [
      {
        id: 'demo-listing-1',
        name: '–ü—Ä–µ–º–∏—É–º –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –ú–æ—Å–∫–≤—ã',
        description: '–≠–ª–∏—Ç–Ω–∞—è 3-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ —Å –≤–∏–¥–æ–º –Ω–∞ –ö—Ä–µ–º–ª—å. –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞ —Å —Ä–∞–∑–≤–∏—Ç–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π.',
        assetType: 'real-estate',
        totalValue: 500000,
        totalTokens: 1000,
        availableTokens: 750,
        pricePerToken: 500,
        expectedROI: 8.5,
        minInvestment: 1000,
        location: '–ú–æ—Å–∫–≤–∞, –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥',
        images: ['https://images.unsplash.com/photo-1560448204-e02f11c3d0e2?w=600&h=400&fit=crop'],
        verification: 'verified',
        status: 'active',
        createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),
        sellerId: 'demo-seller-1',
        tags: ['–ü—Ä–µ–º–∏—É–º', '–¶–µ–Ω—Ç—Ä', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏']
      },
      {
        id: 'demo-listing-2',
        name: '–ö–∞—Ä—Ç–∏–Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ö—É–¥–æ–∂–Ω–∏–∫–∞',
        description: '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ö—É–¥–æ–∂–Ω–∏–∫–∞. –ö–∞—Ä—Ç–∏–Ω–∞ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –≤—ã—Å—Ç–∞–≤–∫–∞—Ö.',
        assetType: 'art',
        totalValue: 200000,
        totalTokens: 400,
        availableTokens: 300,
        pricePerToken: 500,
        expectedROI: 12.0,
        minInvestment: 500,
        location: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
        images: ['https://images.unsplash.com/photo-1541961017774-22349e4a1262?w=600&h=400&fit=crop'],
        verification: 'verified',
        status: 'active',
        createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),
        sellerId: 'demo-seller-2',
        tags: ['–ò—Å–∫—É—Å—Å—Ç–≤–æ', '–ö–æ–ª–ª–µ–∫—Ü–∏—è', '–†–æ—Å—Ç']
      },
      {
        id: 'demo-listing-3',
        name: '–ü—Ä–∞–≤–∞ –Ω–∞ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∞–ª—å–±–æ–º',
        description: '–†–æ—è–ª—Ç–∏ –æ—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –∞–ª—å–±–æ–º–∞ —Å –º–∏–ª–ª–∏–æ–Ω–∞–º–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö.',
        assetType: 'music',
        totalValue: 150000,
        totalTokens: 1000,
        availableTokens: 800,
        pricePerToken: 150,
        expectedROI: 15.2,
        minInvestment: 300,
        location: '–ì–ª–æ–±–∞–ª—å–Ω–æ',
        images: ['https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=600&h=400&fit=crop'],
        verification: 'verified',
        status: 'active',
        createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),
        sellerId: 'demo-seller-3',
        tags: ['–ú—É–∑—ã–∫–∞', '–†–æ—è–ª—Ç–∏', '–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥']
      },
      {
        id: 'demo-listing-4',
        name: '–†–µ–¥–∫–∏–π –∏–≥—Ä–æ–≤–æ–π –ø—Ä–µ–¥–º–µ—Ç',
        description: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π NFT –º–µ—á –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –∏–≥—Ä—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Ç–∏—Ä–∞–∂–æ–º. –î–∞–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü—É –æ—Å–æ–±—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≤ –∏–≥—Ä–µ.',
        assetType: 'gaming',
        totalValue: 75000,
        totalTokens: 500,
        availableTokens: 400,
        pricePerToken: 150,
        expectedROI: 20.0,
        minInvestment: 150,
        location: '–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –º–∏—Ä',
        images: ['https://images.unsplash.com/photo-1550745165-9bc0b252726f?w=600&h=400&fit=crop'],
        verification: 'verified',
        status: 'active',
        createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),
        sellerId: 'demo-seller-4',
        tags: ['Gaming', 'NFT', '–†–µ–¥–∫–æ—Å—Ç—å']
      }
    ];

    // Apply filters
    if (filters?.assetType) {
      listings = listings.filter(listing => listing.assetType === filters.assetType);
    }

    if (filters?.minPrice) {
      listings = listings.filter(listing => listing.pricePerToken >= filters.minPrice);
    }

    if (filters?.maxPrice) {
      listings = listings.filter(listing => listing.pricePerToken <= filters.maxPrice);
    }

    return listings;
  }

  static async purchaseAsset(listingId: string, amount: number, totalPrice: number): Promise<void> {
    // Simulate transaction delay
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    // In demo mode, just simulate success
    console.log(`Demo purchase: ${amount} tokens of ${listingId} for $${totalPrice}`);
  }

  static async createListing(sellerId: string, listingData: any): Promise<string> {
    // Simulate creation delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    const listingId = `demo-listing-${Date.now()}`;
    const listing = {
      ...listingData,
      id: listingId,
      sellerId,
      status: 'active',
      createdAt: new Date()
    };
    
    DemoStorage.set(`listing-${listingId}`, listing);
    return listingId;
  }
}

// Demo governance service
export class DemoGovernanceService {
  static async getActiveProposals(): Promise<any[]> {
    await new Promise(resolve => setTimeout(resolve, 200));
    
    return [
      {
        id: 'demo-proposal-1',
        title: '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤',
        description: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.',
        type: 'expansion',
        status: 'active',
        votesFor: 1250,
        votesAgainst: 340,
        totalVotes: 1590,
        totalVoters: 1590,
        endDate: new Date(Date.now() + 4 * 24 * 60 * 60 * 1000),
        createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),
        creatorId: 'demo-creator-1',
        voters: []
      },
      {
        id: 'demo-proposal-2',
        title: '–°–Ω–∏–∂–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
        description: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–Ω–∏–∑–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å 2.5% –¥–æ 2.0% –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.',
        type: 'fee-change',
        status: 'active',
        votesFor: 890,
        votesAgainst: 450,
        totalVotes: 1340,
        totalVoters: 1340,
        endDate: new Date(Date.now() + 6 * 24 * 60 * 60 * 1000),
        createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),
        creatorId: 'demo-creator-2',
        voters: []
      }
    ];
  }

  static async vote(proposalId: string, userId: string, vote: 'for' | 'against', votingPower: number): Promise<void> {
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // Store vote in demo storage
    const voteKey = `vote-${proposalId}-${userId}`;
    DemoStorage.set(voteKey, { proposalId, userId, vote, votingPower, timestamp: new Date() });
  }

  static async createProposal(creatorId: string, proposalData: any): Promise<string> {
    await new Promise(resolve => setTimeout(resolve, 800));
    
    const proposalId = `demo-proposal-${Date.now()}`;
    const proposal = {
      ...proposalData,
      id: proposalId,
      creatorId,
      status: 'active',
      votesFor: 0,
      votesAgainst: 0,
      totalVotes: 0,
      totalVoters: 0,
      createdAt: new Date(),
      endDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)
    };
    
    DemoStorage.set(`proposal-${proposalId}`, proposal);
    return proposalId;
  }
}

// Demo transaction service
export class DemoTransactionService {
  static async getUserTransactions(userId: string): Promise<any[]> {
    await new Promise(resolve => setTimeout(resolve, 150));
    
    return [
      {
        id: 'demo-tx-1',
        userId,
        type: 'buy',
        assetSymbol: 'REAL',
        amount: 10,
        price: 500,
        total: 5000,
        status: 'completed',
        txHash: 'DemoHash123...',
        createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000)
      },
      {
        id: 'demo-tx-2',
        userId,
        type: 'buy',
        assetSymbol: 'ART',
        amount: 5,
        price: 500,
        total: 2500,
        status: 'completed',
        txHash: 'DemoHash456...',
        createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000)
      },
      {
        id: 'demo-tx-3',
        userId,
        type: 'dividend',
        assetSymbol: 'MUSIC',
        amount: 0,
        price: 0,
        total: 150,
        status: 'completed',
        txHash: 'DemoHash789...',
        createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000)
      }
    ];
  }

  static async createTransaction(transactionData: any): Promise<string> {
    await new Promise(resolve => setTimeout(resolve, 300));
    
    const txId = `demo-tx-${Date.now()}`;
    const transaction = {
      ...transactionData,
      id: txId,
      status: 'pending',
      createdAt: new Date()
    };
    
    DemoStorage.set(`transaction-${txId}`, transaction);
    
    // Simulate processing
    setTimeout(() => {
      transaction.status = 'completed';
      transaction.txHash = `DemoHash${Math.random().toString(36).substring(2, 15)}`;
      DemoStorage.set(`transaction-${txId}`, transaction);
    }, 2000);
    
    return txId;
  }
}

// Demo asset service
export class DemoAssetService {
  static async createTokenizedAsset(assetData: any): Promise<string> {
    await new Promise(resolve => setTimeout(resolve, 1200));
    
    const assetId = `demo-asset-${Date.now()}`;
    const asset = {
      ...assetData,
      id: assetId,
      verificationStatus: 'pending',
      contractAddress: `DemoContract${Math.random().toString(36).substring(2, 15)}`,
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    DemoStorage.set(`asset-${assetId}`, asset);
    
    // Simulate verification process
    setTimeout(() => {
      asset.verificationStatus = 'verified';
      asset.updatedAt = new Date();
      DemoStorage.set(`asset-${assetId}`, asset);
    }, 5000);
    
    return assetId;
  }

  static async getVerifiedAssets(): Promise<any[]> {
    await new Promise(resolve => setTimeout(resolve, 200));
    
    return [
      {
        id: 'demo-verified-1',
        name: '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
        symbol: 'COMM',
        assetType: 'real-estate',
        totalValue: 1000000,
        totalSupply: 2000,
        currentPrice: 500,
        verificationStatus: 'verified',
        expectedROI: 9.5
      },
      {
        id: 'demo-verified-2',
        name: '–í–∏–Ω—Ç–∞–∂–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è',
        symbol: 'VINT',
        assetType: 'art',
        totalValue: 300000,
        totalSupply: 600,
        currentPrice: 500,
        verificationStatus: 'verified',
        expectedROI: 14.2
      }
    ];
  }
}

// Demo notification service
export class DemoNotificationService {
  static async getUserNotifications(userId: string, unreadOnly: boolean = false): Promise<any[]> {
    await new Promise(resolve => setTimeout(resolve, 100));
    
    const notifications = [
      {
        id: 'demo-notif-1',
        userId,
        type: 'transaction',
        title: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        message: '–í–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ 10 —Ç–æ–∫–µ–Ω–æ–≤ REAL —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        isRead: false,
        createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000)
      },
      {
        id: 'demo-notif-2',
        userId,
        type: 'dividend',
        title: '–ü–æ–ª—É—á–µ–Ω—ã –¥–∏–≤–∏–¥–µ–Ω–¥—ã',
        message: '–í—ã –ø–æ–ª—É—á–∏–ª–∏ $150 –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤ –æ—Ç —Ç–æ–∫–µ–Ω–æ–≤ MUSIC',
        isRead: false,
        createdAt: new Date(Date.now() - 6 * 60 * 60 * 1000)
      },
      {
        id: 'demo-notif-3',
        userId,
        type: 'governance',
        title: '–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è',
        message: '–î–æ—Å—Ç—É–ø–Ω–æ –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–æ–≤"',
        isRead: true,
        createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000)
      }
    ];

    return unreadOnly ? notifications.filter(n => !n.isRead) : notifications;
  }

  static async markAsRead(notificationId: string): Promise<void> {
    await new Promise(resolve => setTimeout(resolve, 50));
    // In demo mode, just simulate success
  }

  static async markAllAsRead(userId: string): Promise<void> {
    await new Promise(resolve => setTimeout(resolve, 100));
    // In demo mode, just simulate success
  }
}

// Export demo flag and services
export const isDemoMode = () => DEMO_MODE;

export const DemoServices = {
  UserService: DemoUserService,
  MarketplaceService: DemoMarketplaceService,
  GovernanceService: DemoGovernanceService,
  TransactionService: DemoTransactionService,
  AssetService: DemoAssetService,
  NotificationService: DemoNotificationService
};