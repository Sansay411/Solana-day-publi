import { enableDemoMode, disableDemoMode, isDemoMode } from './demoService';
import { db, auth } from './firebase';
import { disableNetwork, enableNetwork } from 'firebase/firestore';

interface AppMode {
  mode: 'firebase' | 'demo' | 'offline';
  reason: string;
  timestamp: Date;
}

export class AppModeManager {
  private static currentMode: AppMode = {
    mode: 'firebase',
    reason: 'Initial state',
    timestamp: new Date()
  };
  
  private static listeners: Set<(mode: AppMode) => void> = new Set();
  private static firebaseFailureCount = 0;
  private static maxFailures = 3;
  private static firebaseTestTimeout: NodeJS.Timeout | null = null;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π Firebase
  static async initialize(): Promise<void> {
    console.log('üöÄ Initializing AppModeManager...');
    
    // –ù–∞—á–∏–Ω–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ Firebase, –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–∑–∂–µ
    await this.setMode('firebase', 'Initial Firebase mode');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    setTimeout(async () => {
      const isFirebaseAvailable = await this.testFirebaseConnectivity();
      
      if (!isFirebaseAvailable && this.firebaseFailureCount >= 2) {
        await this.setMode('demo', 'Firebase connectivity issues detected');
      }
    }, 3000);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    this.startPeriodicHealthCheck();
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Firebase
  private static async testFirebaseConnectivity(): Promise<boolean> {
    if (!auth || !db) {
      console.warn('‚ö†Ô∏è Firebase not initialized');
      return false;
    }

    try {
      // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
      const testPromise = new Promise((resolve, reject) => {
        const timeout = setTimeout(() => reject(new Error('timeout')), 5000);
        
        // –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const user = auth.currentUser;
        if (user !== undefined) { // undefined –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ firebase –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
          clearTimeout(timeout);
          resolve(true);
        } else {
          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å null, —ç—Ç–æ —Ç–æ–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –∑–Ω–∞—á–∏—Ç –ø—Ä–æ—Å—Ç–æ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
          clearTimeout(timeout);
          resolve(true);
        }
      });

      await testPromise;
      console.log('‚úÖ Firebase connectivity test passed');
      this.firebaseFailureCount = 0;
      return true;
    } catch (error: any) {
      console.warn('‚ùå Firebase connectivity test failed:', error.message);
      this.firebaseFailureCount++;
      return false;
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  private static async setMode(mode: AppMode['mode'], reason: string): Promise<void> {
    const previousMode = this.currentMode.mode;
    
    this.currentMode = {
      mode,
      reason,
      timestamp: new Date()
    };

    console.log(`üîÑ App mode changed: ${previousMode} ‚Üí ${mode} (${reason})`);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    switch (mode) {
      case 'demo':
        enableDemoMode();
        await this.disableFirebase();
        break;
      case 'firebase':
        disableDemoMode();
        await this.enableFirebase();
        break;
      case 'offline':
        // –í –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –¥–∞–Ω–Ω—ã—Ö (demo/firebase)
        await this.disableFirebase();
        break;
    }

    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π
    this.listeners.forEach(listener => {
      try {
        listener(this.currentMode);
      } catch (error) {
        console.error('Error in app mode listener:', error);
      }
    });
  }

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ Firebase
  private static async disableFirebase(): Promise<void> {
    if (db) {
      try {
        await disableNetwork(db);
        console.log('üì¥ Firebase network disabled');
      } catch (error) {
        console.warn('Warning: Could not disable Firebase network:', error);
      }
    }
  }

  // –í–∫–ª—é—á–µ–Ω–∏–µ Firebase
  private static async enableFirebase(): Promise<void> {
    if (db) {
      try {
        await enableNetwork(db);
        console.log('üì∂ Firebase network enabled');
      } catch (error) {
        console.warn('Warning: Could not enable Firebase network:', error);
      }
    }
  }

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  private static startPeriodicHealthCheck(): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(async () => {
      if (this.currentMode.mode === 'demo' && this.firebaseFailureCount >= this.maxFailures) {
        // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Firebase –µ—Å–ª–∏ –±—ã–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã
        const isFirebaseWorking = await this.testFirebaseConnectivity();
        if (isFirebaseWorking) {
          await this.setMode('firebase', 'Firebase connectivity restored');
        }
      }
    }, 30000);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ Firebase
  static async handleFirebaseError(error: any, operation: string): Promise<void> {
    const isNetworkError = this.isNetworkRelatedError(error);
    
    if (isNetworkError) {
      this.firebaseFailureCount++;
      console.warn(`üî• Firebase error in ${operation} (failure count: ${this.firebaseFailureCount}):`, error.message);
      
      if (this.firebaseFailureCount >= this.maxFailures && this.currentMode.mode !== 'demo') {
        await this.setMode('demo', `Too many Firebase failures (${this.firebaseFailureCount})`);
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–µ—Ç–µ–≤—É—é –æ—à–∏–±–∫—É
  private static isNetworkRelatedError(error: any): boolean {
    const networkErrorCodes = [
      'unavailable',
      'deadline-exceeded',
      'timeout',
      'network-request-failed',
      'offline'
    ];

    const networkErrorMessages = [
      'offline',
      'network',
      'timeout',
      'unavailable',
      'transport errored',
      'failed to fetch'
    ];

    if (error.code && networkErrorCodes.includes(error.code)) {
      return true;
    }

    if (error.message) {
      const message = error.message.toLowerCase();
      return networkErrorMessages.some(keyword => message.includes(keyword));
    }

    return false;
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞
  static async forceMode(mode: AppMode['mode'], reason = 'Manual override'): Promise<void> {
    await this.setMode(mode, reason);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
  static getCurrentMode(): AppMode {
    return { ...this.currentMode };
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
  static addModeListener(listener: (mode: AppMode) => void): () => void {
    this.listeners.add(listener);
    
    return () => {
      this.listeners.delete(listener);
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  static getStats() {
    return {
      currentMode: this.currentMode,
      firebaseFailureCount: this.firebaseFailureCount,
      maxFailures: this.maxFailures,
      isDemoMode: isDemoMode(),
      listeners: this.listeners.size
    };
  }

  // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
  static resetFailureCount(): void {
    this.firebaseFailureCount = 0;
    console.log('üîÑ Firebase failure count reset');
  }
}